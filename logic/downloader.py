import subprocess
import os
import re
import signal
import time
from urllib.parse import urlparse
import psutil
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
env = os.environ.copy()
env["PYTHONIOENCODING"] = "utf-8"

CREATE_NO_WINDOW = 0x08000000

def is_youtube(url):
    netloc = urlparse(url).netloc
    return "youtube.com" in netloc or "youtu.be" in netloc

def kill_proc_tree(pid):
    try:
        parent = psutil.Process(pid)
        for child in parent.children(recursive=True):
            child.kill()
        parent.kill()
    except Exception as e:
        print(f"‚ùå ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å Ïã§Ìå®: {e}")

def get_channel_name_from_url(url):
    try:
        import yt_dlp
        info = yt_dlp.YoutubeDL().extract_info(url, download=False)
        return info.get("channel").replace("/", "_")
    except:
        return "unknown_channel"

def run_ytdlp(url, output_path, filename, log_func, resolution="720", audio_only=False, cancel_check_func=lambda: False):
    log_func(f"‚ñ∂ yt-dlp Ïã§Ìñâ: {url}")
    try:
        ffmpeg_path = os.path.abspath(os.path.join("ffmpeg", "ffmpeg.exe"))
        channel_name = get_channel_name_from_url(url)
        channel_name = re.sub(r'[\\\\/:*?\"<>|]', '', channel_name)  # sanitize
        youtube_output_path = os.path.join(output_path, "youtube", channel_name)

        if filename:
            filename = re.sub(r'[\\/:*?\"<>|]', '', filename)
            output_template = f"{filename}.%(ext)s"
            filename_base = filename
        else:
            output_template = "%(title)s.%(ext)s"
            filename_base = None

        command = ["yt-dlp", url, "-P", youtube_output_path, "--no-playlist", "--no-part", "-o", output_template]

        if audio_only:
            command += [
                "-x", "--audio-format", "mp3",
                "--audio-quality", "320k",
                "--ffmpeg-location", ffmpeg_path
            ]
        else:
            command += [
                "-f", f"bestvideo[height<={resolution}]+bestaudio/best",
                "--remux-video", "mp4",
                "--ffmpeg-location", ffmpeg_path
            ]

        proc = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True,
            encoding='utf-8',
            errors='replace',
            creationflags=CREATE_NO_WINDOW | (subprocess.CREATE_NEW_PROCESS_GROUP if os.name == "nt" else 0),
            env=env
        )

        while proc.poll() is None:
            if cancel_check_func():
                log_func("‚õî Ï∑®ÏÜå Í∞êÏßÄ ‚Üí yt-dlp Ï§ëÎã® Î∞è ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú")
                kill_proc_tree(proc.pid)
                if filename_base:
                    cleanup_ytdlp_files(youtube_output_path, filename_base, log_func)
                else:
                    cleanup_ytdlp_temp_files(youtube_output_path, log_func)
                return False

            line = proc.stdout.readline()
            if line:
                log_func(line.strip())

        return proc.returncode == 0

    except Exception as e:
        log_func(f"‚ùå yt-dlp Ïò§Î•ò: {e}")
        return False

def scroll_to_bottom(driver, log_func, pause_time=2, max_tries=20):
    last_height = driver.execute_script("return document.documentElement.scrollHeight")
    tries = 0
    while tries < max_tries:
        log_func(f"üîÑ ÌéòÏù¥ÏßÄ Ïä§ÌÅ¨Î°§ Ï§ë... (ÏãúÎèÑ {tries + 1}/{max_tries})")
        driver.execute_script("window.scrollTo(0, document.documentElement.scrollHeight);")
        time.sleep(pause_time)
        new_height = driver.execute_script("return document.documentElement.scrollHeight")
        if new_height == last_height:
            tries += 1
        else:
            tries = 0
            last_height = new_height
    log_func("‚úÖ Ïä§ÌÅ¨Î°§ ÏôÑÎ£å, Î™®Îì† Í≤åÏãúÍ∏Ä Î°úÎî© ÏôÑÎ£å")

def crawl_community_images_with_id(url, output_dir, log_func=print, cancel_check=lambda: False):
    log_func("üîç Ïú†ÌäúÎ∏å Ïª§ÎÆ§ÎãàÌã∞ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Î°§ÎßÅ ÏãúÏûë (BeautifulSoup Parser)...")

    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)

    driver = webdriver.Chrome(options=options)
    driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
        "source": "Object.defineProperty(navigator, 'webdriver', {get: () => undefined});"
    })

    log_func("üåê ÌéòÏù¥ÏßÄ Ïó¥Í∏∞ Ï§ë...")
    driver.get(url)
    time.sleep(2)

    log_func("üìú Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄ Î°úÎî© Î∞è Ïä§ÌÅ¨Î°§ ÏãúÏûë")
    scroll_to_bottom(driver, log_func)

    html = driver.page_source
    soup = BeautifulSoup(html, 'html.parser')

    channel_name_elem = soup.select_one("h1.dynamic-text-view-model-wiz__h1 span")
    channel_name = channel_name_elem.get_text(strip=True).replace("/", "_") if channel_name_elem else "unknown_channel"
    channel_dir = os.path.join(output_dir, channel_name)
    os.makedirs(channel_dir, exist_ok=True)
    log_func(f"üìÅ Ï±ÑÎÑê ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±Îê®: {channel_dir}")

    driver.quit()

    posts = soup.select("ytd-backstage-post-renderer")
    log_func(f"üì¶ Ï¥ù Í≤åÏãúÍ∏Ä Ïàò: {len(posts)}")
    success = 0
    fail = 0
    image_counter = 1

    for post in posts:
        if cancel_check():
            log_func("‚õî ÏûëÏóÖ Ï∑®ÏÜå ÏöîÏ≤≠Îê® ‚Üí ÌÅ¨Î°§ÎßÅ Ï§ëÎã®")
            break

        imgs = post.find_all("img")
        for img in imgs:
            src = img.get("src")
            log_func(f"[DEBUG] Ïù¥ÎØ∏ÏßÄ src: {src}")

            if src and "yt3.ggpht.com" in src:
                highres_src = src.split('=')[0] + "=s2048"
                filename = f"{image_counter}.jpg"
                filepath = os.path.join(channel_dir, filename)
                try:
                    r = requests.get(highres_src, timeout=10)
                    if r.status_code == 200:
                        with open(filepath, "wb") as f:
                            f.write(r.content)
                        log_func(f"‚úÖ Saved: {filename}")
                        success += 1
                        image_counter += 1
                    else:
                        log_func(f"‚ùå Skipped: HTTP {r.status_code} ‚Üí {filename}")
                        fail += 1
                except Exception as e:
                    log_func(f"‚ùå Failed: {e}")
                    fail += 1

    log_func(f"\nüéØ ÏµúÏ¢Ö Í≤∞Í≥º: ÏÑ±Í≥µ {success}Í∞ú, Ïã§Ìå® {fail}Í∞ú")
    if not cancel_check():
        try:
            if os.name == 'nt':
                os.startfile(channel_dir)
            elif os.name == 'posix':
                subprocess.Popen(['xdg-open', channel_dir])
        except Exception as e:
            log_func(f"‚ö†Ô∏è Ìè¥Îçî ÏûêÎèô Ïó¥Í∏∞ Ïã§Ìå®: {e}")
    return success > 0

def smart_download(url, output_dir, filename, log_func, resolution="720", audio_only=False, cancel_check_func=lambda: False):
    try:
        import yt_dlp
    except ImportError:
        log_func("‚ùå yt-dlp Î™®ÎìàÏù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
        return False

    if "/community" in url:
        success = crawl_community_images_with_id(
            url, output_dir, log_func=log_func, cancel_check=cancel_check_func
        )
        return success and not cancel_check_func()

    if is_youtube(url):
        return run_ytdlp(
            url=url,
            output_path=output_dir,
            filename=filename,
            log_func=log_func,
            resolution=resolution,
            audio_only=audio_only,
            cancel_check_func=cancel_check_func
        )
    return None

def cleanup_ytdlp_temp_files(download_dir, log_func, window_seconds=300):
    try:
        now = time.time()
        exts = [".webm", ".mp4", ".mkv", ".m4a", ".part", ".temp"]
        deleted = 0

        for file in os.listdir(download_dir):
            path = os.path.join(download_dir, file)
            if not os.path.isfile(path):
                continue

            is_target_ext = any(file.endswith(ext) for ext in exts)
            is_temp_name = re.search(r"\.f\d{3,4}\.", file)
            is_recent = now - os.path.getmtime(path) < window_seconds

            if is_target_ext and (is_recent or is_temp_name):
                os.remove(path)
                log_func(f"üßπ yt-dlp ÏûÑÏãú/Ï§ëÍ∞Ñ ÌååÏùº ÏÇ≠Ï†úÎê®: {path}")
                deleted += 1

        if deleted == 0:
            log_func("‚ÑπÔ∏è ÏÇ≠Ï†úÎêú yt-dlp ÏûÑÏãú ÌååÏùº ÏóÜÏùå")
    except Exception as e:
        log_func(f"‚ö†Ô∏è yt-dlp ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: {e}")

def download_gallery(url, output_dir, filename, selected_exts, log_func, status_func, cancel_check_func, proc_register):
    try:
        command = ["gallery-dl", "-d", output_dir]
        if selected_exts:
            ext_list_str = ", ".join(f"'{ext}'" for ext in selected_exts)
            command += ["--filter", f"extension in ({ext_list_str})"]

        if filename:
            command += ["-o", f"filename={filename}_{{num}}.{{extension}}"]

        command.append(url)
        log_func(f"Î™ÖÎ†πÏñ¥ Ïã§Ìñâ: {' '.join(command)}")

        proc = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True,
            encoding='utf-8',
            errors='replace',
            creationflags=CREATE_NO_WINDOW | (subprocess.CREATE_NEW_PROCESS_GROUP if os.name == "nt" else 0),
            env=env
        )
        proc_register(proc)

        downloaded = 0
        total_guess = 30

        while proc.poll() is None:
            if cancel_check_func():
                log_func("‚õî Ï∑®ÏÜå Í∞êÏßÄÎê® ‚Üí ÌîÑÎ°úÏÑ∏Ïä§ Ìä∏Î¶¨ Í∞ïÏ†ú Ï¢ÖÎ£å")
                kill_proc_tree(proc.pid)
                return False

            line = proc.stdout.readline()
            if line:
                line = line.strip()
                log_func(line)
                if "[download]" in line:
                    downloaded += 1
                    percent = min(int((downloaded / total_guess) * 100), 100)
                    status_func(f"ÏÉÅÌÉú: Îã§Ïö¥Î°úÎìú Ï§ë... {percent}%")

        if proc.returncode == 0:
            status_func("ÏÉÅÌÉú: ÏôÑÎ£å")
            log_func("‚úÖ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å")
            return True
        else:
            status_func("ÏÉÅÌÉú: Ïò§Î•ò")
            log_func(f"‚ùå gallery-dl ÏóêÎü¨ ÏΩîÎìú: {proc.returncode}")
            return False

    except Exception as e:
        log_func(f"‚ùå gallery-dl Ïò§Î•ò Î∞úÏÉù: {e}")
        status_func("ÏÉÅÌÉú: Ïã§Ìå®")
        return False